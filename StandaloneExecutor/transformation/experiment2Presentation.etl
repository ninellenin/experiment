import "utils.etl";

rule DocumentRoot2Scenario
transform root: Experiment!DocumentRoot
to scenario: Presentation!Scenario {
  	scenario.header ::= root.psychoPy2experiment.settings;
  	var sdl ::= root.psychoPy2experiment.routines;
  	scenario.sdl.add(sdl);
  	scenario.pcl.add(new Presentation!PCL);
}

@lazy
rule Settings2Header 
 transform settings : Experiment!Settings
 to header : Presentation!Header {
  	settings.param.transformParameters(header.parameter);
}

@lazy
rule Param2ScenarioNameParameter
transform parameter: Experiment!Param
to scenarioName: Presentation!ScenarioNameParameter {
guard : parameter.name = "scenario"
	scenarioName.name_literal = new Presentation!NameLiteral;
	scenarioName.name_literal.value = parameter.val;
}

@lazy
rule Param2ActiveButtonsParameter
transform parameter: Experiment!Param
to activeButtons: Presentation!ActiveButtonsParameter {
guard : parameter.name = "active_buttons"
	activeButtons.number_literal = new Presentation!NumberLiteral;
	activeButtons.number_literal.value = parameter.val.asInteger;
}

@lazy
rule Param2ButtonCodesParameter
transform parameter: Experiment!Param
to buttonCodes: Presentation!ButtonCodesParameter {
guard : parameter.name = "button_codes"
	var codes = parameter.val.split(", ");
	for (code in codes) {
		var codeLiteral = new Presentation!NumberLiteral;
		codeLiteral.value = code.asInteger;
		buttonCodes.number_literal.add(codeLiteral);
	}
}

@lazy
rule Routines2SDL
transform routines: Experiment!Routines
to sdl: Presentation!SDL {
	for (routine in routines.routine) {
		var trial ::= routine;
		sdl.scenario_object.add(trial);
	}
}

@lazy
rule Routine2Trial
transform routine: Experiment!Routine
to trial: Presentation!Trial {
	trial.stimulus_list = new Presentation!StimulusList;
	trial.name = routine.name;
	for (component in routine.componentGroup) {
		var pic: Presentation!PictureStimulusEvent;
		pic ::= component.getValue();
		if (pic.isDefined()) {
			trial.stimulus_list.stimulus_event.add(pic);
		}
	}
}

@lazy
rule ImageComponent2PictureStimulusEvent
transform component: Experiment!Component
to pictureStimulusEvent: Presentation!PictureStimulusEvent {
guard: 	component.eContainingFeature().getName() = "imageComponent"
	pictureStimulusEvent.name = component.name;
	var bitmapStimulus = pictureStimulusEvent.createBitmapStimulus();
	//component.param.transformParameters(bitmap.bitmap_parameters);
}

@lazy
rule Param2FilenameParameter
transform parameter: Experiment!Param
to fileName: Presentation!FilenameParameter {
guard: parameter.name = "image" //and parameter.type = Experiment!ValType#str
	"Hello!".println();
}
