rule DocumentRoot2Scenario
transform root: PyExperiment!DocumentRoot
to scenario: Presentation!Scenario {
  	scenario.header ::= root.Experiment.settings;
  	scenario.sdl.add(new Presentation!SDL);
  	scenario.pcl.add(new Presentation!PCL);
}

@lazy
rule Settings2Header 
 transform settings : PyExperiment!Settings
 to header : Presentation!Header {
  
  	for (param in settings.param) {
		var parameter: Presentation!Parameter;
		parameter ::= param;
		if (parameter.isDefined()) {
			header.parameter.add(parameter);
  		} else {
  			("Unknown parameter '" + param.name + "'.").println();
  		}
  }
}

@lazy
rule Param2ScenarioNameParameter
transform parameter: PyExperiment!Param
to scenarioName: Presentation!ScenarioNameParameter {
guard : parameter.name = "scenario"
	scenarioName.scenario_name = new Presentation!NameLiteral;
	scenarioName.scenario_name.value = parameter.val;
}

@lazy
rule Param2ActiveButtonsParameter
transform parameter: PyExperiment!Param
to activeButtons: Presentation!ActiveButtonsParameter {
guard : parameter.name = "active_buttons"
	activeButtons.active_buttons = new Presentation!NumberLiteral;
	activeButtons.active_buttons.value = parameter.val.asInteger;
}

@lazy
rule Param2ButtonCodesParameter
transform parameter: PyExperiment!Param
to buttonCodes: Presentation!ButtonCodesParameter {
guard : parameter.name = "button_codes"
	var codes = parameter.val.split(", ");
	for (code in codes) {
		var codeLiteral = new Presentation!NumberLiteral;
		codeLiteral.value = code.asInteger;
		buttonCodes.button_codes.add(codeLiteral);
	}
}

@lazy
rule Routine2Trial
transform routine: PyExperiment!Routine
to trial: Presentation!Trial {
	trial.stimulus_list = new Presentation!StimulusList;
	trial.name = routine.name;
	for (component in routine.componentGroup) {
		
	}
}